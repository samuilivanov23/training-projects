<div class="container">
    <form action="/plot" autocomplete="off" class="margin_style" method="get">
        <div class="autocomplete" style="width:300px">
            <label for="author"> Author </label><br>
            <input id = "myAuthor" type="text" name="author" placeholder="Enter author name" value="" onchange="inputChange(this.form)"><br><br>
        </div>

        <div class="autocomplete" style="width:300px">
            <label for="author"> Book </label><br>
            <input id="myBook" type="text" name="book" placeholder="Enter book name" value=""><br><br>
        </div>

        <input class="button button_style" type="submit" value="submit"><br>
    </form>
</div>

<div id="chart">

<script type="text/javascript">
    //get data for the autocomplete.js
    inputData = ['{{authors_autocomplete}}'];
    let formatedDataAuthors = inputData[0].split(',');
</script>

<script>
    function inputChange(myForm)
    {
        let form_data = new FormData(myForm);

        var author_name;

        $.ajax({
            data: {'author' : form_data.get('author'), 'book' : form_data.get('book')},
            type: $(myForm).attr('method'),
            url: '/proccess_author',
            success: function (response) {
                console.log(response);
                AutoComplete(document.getElementById("myBook"), response['books']);
            }
        });
    }

    //first arg -> the text field
    //second arg -> the array of cities
    function AutoComplete(input, cities) 
    {
        //used to track which is the active city we are about to choose
        var currentFocus;
        
        //executed when someone writes in the text field
        input.addEventListener("input", function(e) 
        {
            var all_items_div, single_item_div, i, val = this.value;
            //close any already open lists of autocompleted values
            CloseAllLists();

            if (!val) 
            {
                return false;
            }

            currentFocus = -1;

            //create div element that will contain all the items
            all_items_div = document.createElement("DIV");
            all_items_div.setAttribute("id", this.id + "autocomplete-list");
            all_items_div.setAttribute("class", "autocomplete-items");

            //append this div elemetn as a child of the input field
            this.parentNode.appendChild(all_items_div);
            //iterate through the array of cities
            for (i = 0; i < cities.length; i++) {

                //check if the item's first letter matches with the text field value first letter
                if (cities[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) 
                {
                    //create div element for each maching item
                    single_item_div = document.createElement("DIV");

                    //make the matching letters bold
                    single_item_div.innerHTML = "<strong>" + cities[i].substr(0, val.length) + "</strong>";
                    //the rest of the letters are normal
                    single_item_div.innerHTML += cities[i].substr(val.length); 
                    
                    //add input field that will hold the current items's value (the name of the city)
                    single_item_div.innerHTML += "<input type='hidden' value='" + cities[i] + "'>";
                    
                    //close all autocomplete items (matching items) if someone click on the current item's value
                    single_item_div.addEventListener("click", function(e) {
                        //insert the clicked item's value in the input text field
                        input.value = this.getElementsByTagName("input")[0].value;

                        //then close the list of all other autocomplete values (matching values)
                        CloseAllLists();
                    });

                    //add the individual item's div element as a child of the autocomplete container
                    all_items_div.appendChild(single_item_div);
                }
            }
        });

        //executed when a key is pressed
        input.addEventListener("keydown", function(pressed_key) 
        {
            var items = document.getElementById(this.id + "autocomplete-list");
            if (items) items = items.getElementsByTagName("div");

            //if the arrow DOWN is pressed
            if (pressed_key.keyCode == 40) 
            {
                //increase the currentFocus 
                //and make the current item active
                currentFocus++;
                AddActive(items);
            }
            //if the arrow UP is pressed
            else if (pressed_key.keyCode == 38) 
            {
                //decrease the currentFocus 
                //and make the current item active
                currentFocus--;
                AddActive(items);
            } 
            //if the ENTER key is pressed, prevent the form from being submitted
            else if (pressed_key.keyCode == 13) 
            {
                pressed_key.preventDefault();
                if (currentFocus > -1) 
                {
                    //simulate click on the current "active" item
                    if (items) items[currentFocus].click();
                }
            }
        });

        //classify and item as "active"
        function AddActive(items) 
        {
            if (!items) return false; //no active items

            //remove the "active" class from all items
            RemoveActive(items);

            if (currentFocus >= items.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (items.length - 1);

            //adding the "autocomplete-active" class
            items[currentFocus].classList.add("autocomplete-active");
        }

        //remove the "active" classe from all autocomplete items;
        function RemoveActive(autocomplete_active_items)
        {
            for (var i = 0; i < autocomplete_active_items.length; i++) 
            {
                autocomplete_active_items[i].classList.remove("autocomplete-active");
            }
        }

        //close all autocomplete lists
        //except the one passed as an argument
        function CloseAllLists(element) 
        {
            var items = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < items.length; i++) {
                if (element != items[i] && element != input) {
                    items[i].parentNode.removeChild(items[i]);
                }
            }
        }

        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) 
        {
            CloseAllLists(e.target);
        });
    }

    AutoComplete(document.getElementById("myAuthor"), formatedDataAuthors);
</script>

<script type="text/javascript">
    //get data for the plot.js script that draws the plot
    let inputData = ['{{plotData}}'];
    let formatedData = inputData[0].split(',');

    let x_axis = []
    let y_axis = []

    let chart_title = "Top 10 authors with most unique words";
    let x_label = "Author";
    let y_label = "Number of unique words";

    for(let i = 0; i < formatedData.length/2; i++)
    {
        x_axis.push(formatedData[i]);
    }

    for(let i = formatedData.length/2; i < formatedData.length; i++)
    {
        y_axis.push(formatedData[i]);
    }
</script>

<script type="text/javascript" src="/plot.js"></script>