count files with in dir with subdirs using FIND ||| find /etc -type f | wc -l
kill multiple instances of same process ||| kill $(ps aux | grep -i "monitor.py" | grep -v grep | awk '{print $2}')
renew ssh keys if warning message for dns spoofing is shown ||| ssh-keygen -f "/home/samuil2001ivanov/.ssh/known_hosts" -R "debian10hackerschool"/"yr.ip.ad.dr"
disable suspend/sleep on debian server |||  sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target
enable hibernate/sleep on debian server ||| sudo systemctl unmask sleep.target suspend.target hibernate.target hybrid-sleep.target
install mod_perl2 on Debian/Ubuntu ||| apt-get -y install libapache2-mod-perl2
Check linux version ||| lsb_release -a
non-free contrib buster-backports packages ||| add them in /etc/apt/sources.list
redmine log dir |||  /usr/share/redmine/instances/default/log
count all occurance of a string in a given directory ||| for file in .txt; do grep -o 'Author' $file | echo "${file%.}" : $(wc -l); done
folder disk space usage ||| du -sh
run command as another user (start OTRS daemon for example) ||| su -c "/usr/share/otrs/bin/otrs.Daemon.pl start" -s /bin/bash otrs
Check disk usage of devices ||| df -h
Check disk usage of files folder etc ||| du -sh . (shows disk space used by the whole current dir)
Check disk usage of files folder etc ||| du -sh * (shows disk space used per folder in current dir)
get symlinks recursively from directory, print name and reference ||| cnt=0; for line in $(ls -laR | grep '->' | awk '{print $9, $11}'); do let cnt=cnt+1; if [ $cnt -eq 2 ]; then echo "Processing $line line..."; cnt=0; else echo "ProceSSing $line line..."; fi; done
redirecting commands to files ||| cat tmp.txt > tmp2.txt (rewrites the file with new content)
redirecting commands to files ||| cat tmp.txt >> tmp2.txt (appends the output of the command to the end of the file)
grep by multiple expressions ||| ls -la | grep -E '.pl|.sh' | wc -l
grep with Perl REGEX / AWK using AND logic for 2 patterns ||| find ./ | grep -P '^(?=.systemd)(?=.timer)' |||  find ./ | awk '/systemd/ && /timer/'
zbx user parameter perl regex ||| megacli.virt[*],\s+\K.*
IO commands (usefull) ||| iostat -hymx 1 4(1 per second, 4 iterations) ||| iotop -o (intsall iotop)
grep in man page ||| man grep | grep -- -i
grep lines before/after ||| grep -A/-B <number> <file>
create xen virtual machine ||| xen-create-image --hostname=samuil-test --size=10Gb --swap=1Gb --ip=10.20.1.130 --gateway=10.20.1.1 --netmask=255.255.255.0 --bridge=xenbr0 --password=Parola42 --memory=4Gb --vcpu=2 --pygrub --arch=amd64 --role=udev --dir=/home/sysadmin/xen --serial_device=hvc0 --disk_device=xvda --dist=buster --force
AS ROOT install man, net-tools, sudo, vim on debian buster ||| apt install man net-tools sudo vim
AS ROOT create user ||| adduser <username> (run as root)
AS ROOT add user to sudoers ||| adduser <username> sudo
install firewall ||| sudo apt install ufw
enable/disable/status firewall ||| ufw <enable/disable/status>
allow ssh from specific ip ||| ufw allow in from <ip[/netmask] to <ip/any> port <PORTNO> proto tcp
vim diff check ||| vim -d <files>
----NGINX+APACHE+WORDPRESS----
sudo apt-get install nginx, python-pip
sudo pip3 install nginxtop
edit /etc/nginx/sites-available/example (change root, location /, location ~ \.php$, add proxy_header_set and proxypass 127.0.0.1:8080, location ~ /\.ht deny all)
sudo ln -s /etc/nginx/sites-available/example /etc/nginx/sites-enabled/example
sudo rm /etc/nginx/sites-enabled/default
nginx-stub-status ||| location / { stub_status; access_log off; allow 10.20.1.121; deny all; }
sudo apt-get install apache2 php
sudo vim /etc/apache2/ports.conf (set NameVirtualHost 127.0.0.1:8080; Listen 127.0.0.1:8080)
sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/example.conf
sudo vim /etc/apache2/sites-available/example.conf (set <VirtualHost 127.0.0.1:8080>)
sudo a2ensite example.conf
sudo a2dissite 000-default.conf
sudo systemctl reload apache2
sudo systemctl reload nginx
apt install wordpress curl mariadb-server
mysql_secure_installation
-------------------------------
esxcli get all vms info ||| vim-cmd vmsvc/getallvms
----ENABLE SSH TO LIVE .ISO----
add password for the root user ||| sudo passwd root
change /etc/ssh/sshd_config ||| +PermitRootLogin yes; +PasswordAuthentication yes;
transfer file with tar ||| tar cvf - <dir1|. for current dir> | tar xf - -C <dir2>
-------------------------------
----FULL DISK ENCRYPTION LVM----
install required packages ||| apt install cryptsetup pv lvm2
backup system to the second drive || dd if=/dev/sdX | pv --progress --eta --bytes --rate | dd of=/dev/sdY
delete partition table on the first drive ||| fdisk utility
create phisycal partition || fdisk utility
encrypt partition using LUKS  ||| cryptsetup luksFormat -c aes-xts-plain64:sha512 -s 512 --type lusk1 /dev/sdXY
details about encrypted partition ||| cryptsetup luksDump /dev/sdXY
open the encrypted partition ||| cryptsetup luksOpen /dev/sdXY <luks_part_name>
create physical volume for the partition ||| pvcreate /dev/mapper/<luks_part_name>
create volume group ||| vgcreate <vgname> /dev/mapper/<luks_part_name>
create logical volumes ||| lvcreate -n <lv-name> -L <strict_size> <vgname> (-l 100%FREE option)
create filesystem for the logical volumes ||| mkfs.ext4 /dev/mapper/<lv-name> or mkswap /dev/mapper/<lv-name>
transfer system back to the encrypted drive ||| tar cvf - <source> | tar xf - -C <destination> (/ /boot /var/log /home etc..)
chroot to the encrypted drive to install grub and initramfs
sudo mount --bind /dev /mnt/dev
sudo mount --bind /run /mnt/run
sudo chroot /mnt/
sudo mount --types=proc proc /proc
sudo mount --types=sysfs sys /sys
edit /etc/default/grub ||| +GRUB_ENABLE_CRYPTODISK=y; +GRUB_CMDLINE_LINUX="cryptdevice=/dev/mapper/<luks_part_name> root=/dev/mapper/<root-lvname | cryptvg-lv--root> lvm=<luks_part_name>"; +GRUB_PRELOAD_MODULES="lvm";
install grub ||| grub-install --boot-directory=/boot /dev/sdX (!!! IMPORTANT TO SPECIFY just the DEVICE)
update grub2 ||| update-grub2
edit/create /etc/crypttab ||| +<luks_part_name | cryptlvm>        UUID=<luks_uuid>       none       luks
edit /etc/fstab ||| replace the UUIDs with the /dev/mapper/lv-name associated with the partitions
create /etc/initramfs-tools/conf.d/cryptroot ||| CRYPTROOT=target=tempo-root,source=/dev/disk/by-uuid/<luks_partition|/dev/sdaX>
install cryptsetup-initramfs ||| apt install cryptsetup-initramfs
update initramfs image ||| update-initramfs -u -k all
unmount chrooted env ||| umount /mnt/run /mnt/dev /mnt/proc /mnt/sys
reboot
-------------------------------------------------------------------
---SINGLE NON-BOOTALBE PARTITION ENCRYPTION----
backup
encrypt the specified partition ||| cryptsetup luksFormat -c aes-xts-plain64;sah512 -s 512 --type luks1 /dev/sdXY
open the encrypted partition ||| cryptsetuo luksOpen /dev/sdXY + enter passphrase
trasfer data back to the encrypted partition ||}| tar cvf - .| tar xf - -C <encr-part-mount-point>
chroot into the root partition
edit /etc/fstab (change the uuid to /dev/mapper/cryptvg-lv--home)
add the encrypted partition in the /etc/crypttab ||| + <encrypted-lvm-name> <partition source device | /dev/sda5> <none> <luks>
exit from chrooted env and unmount partitions including /mnt/run, /mnt/dev, /mnt/proc, /mnt/sys
reboot
--------------------------------------------------------------------
----vSphere Perl SDK + Session File + Debian----
install open-vm-tools ||| apt install open-vm-tools (if installing the SDK on a VM)
install required perl dependencies ||| apt install lib32z1  libncurses5 build-essential uuid uuid-dev libssl-dev perl-doc libxml-libxml-perl libcrypt-ssleay-perl libsoap-lite-perl libmodule-build-perl
download the compressed .tar.gz SDK from vmware website
transfer the .tar.gz to the intendet VM ||| scp [OPTION] [user@]SRC_HOST:]file1 [user@]DEST_HOST:]file2 | example (from local machine to specified virtual machine): scp VMware-vSphere-Perl-SDK-6.7.0-8156551.x86_64.tar.gz samuil@10.20.1.117:/home/samuil/Downloads
untar the file ||| tar xvzf VMware-vSphere-Perl-SDK-6.7.0-8156551.x86_64.tar.gz 
edit xxx/vmware-vsphere-cli-distrib/bin/vmware-uninstall-vSphere-CLI.pl ||| line 2382 and 2410 (identical): change UUID -> Data::UUID; AND line 2283: change ubuntu -> debian: if ( direct_command("cat /etc/*-release | grep -I ubuntu") || direct_command("cat /proc/version | grep -I ubuntu") ) { ---> if ( direct_command("cat /etc/*-release | grep -I debian") || direct_command("cat /proc/version | grep -i debian") ) {
run the vSphere SDK installer ||| xxx/vmware-vsphere-cli-distrib/vmware-install.pl
edit /usr/share/perl/5.28.1/VMware/SSOConnection.pm ||| line 27: UUID -> Data::UUID
edit /usr/share/perl/5.24.1/VMware/VICommon.pm ||| after module loads (like in line 26) add: BEGIN { $ENV{PERL_NET_HTTPS_SSL_SOCKET_CLASS} = "Net::SSL"; $ENV{PERL_LWP_SSL_VERIFY_HOSTNAME} = 0; }
create a session file ||| perl xxx/vmware-vsphere-cli-distrib/apps/session/save_session.pl --savesessionfile <location|/tmp/vSphere-sessionfile> --server <dest ip/domain | x.x.x.x>
run vSphere scripts using the session file now ||| perl xxx/vmware-vsphere-cli-distrib/apps/host/hostinfo.pl --sessionfile <session_file location|/tmp/vsphere-session-file>
-------------------------------------------------------------
----ZABBIX SERVER + PGSQL----
install postgresql ||| apt update; apt install postgresql postgresql-contrib
install zabbix-server + zabbix-frontend-php + zabbix-apache-conf ||| apt install zabbix-server-pgsql zabbix-frontend-php zabbix-apache-conf
create zabbix postgresql user ||| sudo -u postgres createuser --pwprompt zabbix (+ enter a password)
create zabbix database owned by zabbix user ||| sudo -u postgres createdb -O zabbix -E Unicode -T template0 zabbix
import data to the database ||| zcat /usr/share/zabbix-server-pgsql/<schema.sql.gz|images.sql.gz|data.sql.gz> | psql -U zabbix zabbix 
if crash: remove commit/rollback in data.sql 
set DBName/DBUser/DBPassword in /etc/zabbix/zabbix_server.conf ||| vim /etc/zabbix/zabbix_server.conf
edit /etc/logrotate.d/zabbi-server-pgsql ||| vim /etc/logrotate.d/zabbix-server-pgsql --> create 0640 zabbix zabbix
change the group of zabbix log file ||| chgrp zabbix /var/log/zabbix-server/
chmod g+wr zabbix-server
OR change ownership of zabbix log dir ||| chown zabbix:zabbix /var/log/zabbix-server
specify which user/group to be used for rotation ||| vim /etc/logrotate.d/zabbix-server-pgsql -> + su zabbix zabbix
start + enable zabbix server ||| systemctl start zabbix-server; update-rc.d zabbix-server enable | systemctl enable zabbix-server;
uncoment date.timezone in /etc/apache2/conf-available ||| vim /etc/apache2/conf-available/zabbix-frontend-php.conf
enable zabbix apache config ||| cd /etc/apache2/conf-available/; a2enconf zabbix-frontedn-php.conf
restart apache2 service ||| systemctl reload apache2
open http://<ip.ad.d.r>/zabbix + follow steps
download zabbix.conf.php ||| scp zabbix.conf.php <user>@:/home/<user>/Downloads/ (from local pc)
move zabbix.conf.php to /etx/zabbix/ ||| mv /home/<usr>/Downloads/zabbix.conf.php /etx/zbbix/ (on zabbix server)
--------------------------------------------------------------
----ZABBIX PROXY + PGSQL----
apt update
apt install postgresql postgresql-contrib zabbix-proxy-pgsql
setup database + import initial schema 
configure ServerActive
add the zabbix proxy in the zabbix server frontend interface
-------------------------------------------------------------
----APPARMOR ZABBIX AGENT----
install apparmor tools ||| apt install apparmom-utils
generate zabbix_agent profile ||| aa-autodep zabbix_agent (use which to determine the path of the service you want to protect)
edit profile in /etc/apparmor.d/usr.sbin.zabbix_agent ||| vim /etc/apparmor.d/usr.sbin.zabbix_agent
update the profile ||| aa-logprof (type (A) when prompted)
reload apparmor ||| systemctl reload apparmor
restart zabbix-agent ||| systemctl restart zabbix-agnet
-------------------------------------------------------------
----DISK IMAGE VIA SSH TO LOCAL DISK----
dd if=/dev/sdX | ssh <local-PC-user>@<local-PC-IP> dd od=/path/to/iso/file (!!! NOTE: execute this comamnd from the VM you want the disk image and save it to you local system. Must have installed an openssh-server on the local system to connect with SSH)
-------------------------------------------------------------
----EXTEND ENCRYPTED LVM PARTITION----
unmount the partition ||| lsof -nP | grep <mntpt>; kill -9 <systemd service name>; umount /path/to/mntpt
enlarge the phisical partition with fdisk ||| fdisk /dev/sdXY -> d <partition number> -> n <primary | same parition number | same start sector | last sector to he end, usually the default option> -> No (DO NOT erase the existing data from the partition) -> p (to check config) -> w (save changes)
resize the LUKS partition ||| cryptsetup resize /dev/mapper/<luks-partition-name|cryptlvm2>
resize the physical volume on which the VG lives ||| pvresize /dev/mapper/<luks-partition-name|cryptlvm2>
resize the logical volume size ||| lvresize -L <sizeM/G/T/P> /dev/mapper/cryptvg--<name-of-lv|lv-log>
resize the fs of the logical volume partition ||| resize2fs /dev/mapper/cryptvg--<name-of-lv|lv-log>
-------------------------------------------------------------
----SHRINK ENCRYPTED LVM PARTITION----
resize logical volume and resize fs ||| lvresize --verbose --resizefs -L <sizeG> /dev/mapper/cryptvg-lv--log
resize the physical volume ||| pvresize --setphysicalvolumesize <sizeG> /dev/mapper/<luks-partition-name|cryptlvm>
resize LUKS partition (calculate the 512M sectors) ||| cryptsetup resize --size <sectors-number|31458000 for 15G> /dev/mapper/<luks-partition-name\cryptlvm>
resize the physical partition ||| fdisk /dev/sdXY -> d <partition-number> -> n (primary | same partition number | same start sector | end sector as the one used for the encrypted luks part | 31458000) -> NO (DO NOT erase the existing data from the partition) -> p (check config) -> w (save changes)
-------------------------------------------------------------
----CPU/RAM HOT ADD---
for file in /sys/devices/system/cpu/cpu*; do echo 1 > $file/online; done;
for file in /sys/devices/system/memory/memory*; do echo 1 > $file/online; done;
-------------------------------------------------------------
----BLOCKS VS BYTES----
512 byte = 1 block

      2 block = 1024 byte = 1 kb
   2048 block = 1024 kb   = 1 mb
2097152 block = 1024 mb   = 1 gb


BLOCKS TO MB:   blocks / 2048 = mb
BLOCKS TO KB:   blocks / 2    = kb

KB TO MB:       kb / 1024 = mb
MB TO KB:       mb x 1024 = kb

MB TO GB:       mb / 1024 = gb
GB TO MB:       gb x 1024 = mb

KB TO BLOCKS:   kb x 2    = blocks
MB TO BLOCKS:   mb x 2048 = blocks
-------------------------------------------------------------
---- SET NETWORK INTERFACE MANUALLY ----
edit /etc/network/interfaces ||| if <if-name|ens192> auto; iface <if-name|ens192> inet <static|dhsp>; \taddress <ip.ad.d.r/netmask>; \tgateway <router-ip-addr>;
set nameserver in /etc/resolve.conf if not set ||| nameserver <nameserver-addr>
restart the interface ||| ifconfig <if-name> down; ifconfig <if-name> up;
restart networking service ||| systemctl restart networking
-------------------------------------------------------------
--- POSTGRESQL ----
check edited postgres config ||| select pg_relaod_conf();
change database ||| \c <dbname>
list databases ||| \l
list relations ||| \d
list relation constraints ||| \d+ <table-name>
-------------------------------------------------------------
